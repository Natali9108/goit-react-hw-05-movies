{"version":3,"file":"static/js/780.c07bca89.chunk.js","mappings":"qRAEaA,EAAWC,EAAAA,EAAAA,GAAH,2HACR,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,EAAxB,IAOLC,EAAWJ,EAAAA,EAAAA,GAAH,gEAIRK,EAAUL,EAAAA,EAAAA,IAAH,sBAEPM,EAAUN,EAAAA,EAAAA,IAAH,wFAMPO,EAAeP,EAAAA,EAAAA,EAAH,uFACN,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,EAAxB,IACT,SAAAF,GAAK,OAAIA,EAAMC,MAAMM,UAAUC,KAA1B,IAIPC,EAAYV,EAAAA,EAAAA,KAAH,gEACP,SAAAC,GAAK,OAAIA,EAAMC,MAAMM,UAAUC,KAA1B,IAIPE,EAAgBX,EAAAA,EAAAA,EAAH,+DAEX,SAAAC,GAAK,OAAIA,EAAMC,MAAMM,UAAUC,KAA1B,I,SCvBPG,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACzB,OACE,0BACE,SAACd,EAAD,UACGc,EAAKC,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,cAAeC,EAA3B,EAA2BA,aAAcC,EAAzC,EAAyCA,UAAzC,OACR,UAACd,EAAD,YACE,SAACC,EAAD,CACEc,IACEF,EAAY,UAAMG,EAAAA,IAAN,OAAmBH,GAAiBI,EAAAA,GAElDC,IAAKN,KAEP,UAACV,EAAD,YACE,SAACC,EAAD,UAAeS,KACf,SAACN,EAAD,UAAW,gBACX,SAACC,EAAD,UAAgBO,SAVLH,EADP,OAkBjB,ECVD,EAnBa,WACX,IAAQQ,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOZ,EAAP,KAAaa,EAAb,KAUA,OARAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAAwBL,GACrBM,MAAK,YAAe,IAAZhB,EAAW,EAAXA,KACPa,GAAQ,OAAIb,GACb,IACAiB,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,EAAhB,GACb,GAAE,CAACR,KAGF,+BACE,SAACX,EAAD,CAAUC,KAAMA,KAGrB,C,mMCpBDqB,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,sGACRF,EAAAA,EAAAA,IAAA,qCAAwCC,GAAW,CACxEE,OAAQ,CAAEC,SAAU,WAFS,uBACvBC,EADuB,EACvBA,KADuB,kBAKxBA,GALwB,2CAAH,qDAQjBC,EAAe,mCAAG,WAAMC,GAAN,yFACNP,EAAAA,EAAAA,IAAA,4DACgCC,GACrD,CACEE,OAAQ,CACNI,MAAM,GAAD,OAAKA,GACVC,cAAe,QACfJ,SAAU,QACVK,KAAM,OARiB,uBACrBJ,EADqB,EACrBA,KADqB,kBAatBA,GAbsB,2CAAH,sDAgBfK,EAAe,mCAAG,WAAMrB,GAAN,yFACNW,EAAAA,EAAAA,IAAA,gBAAmBX,EAAnB,oBAAsCY,GAAW,CACtEE,OAAQ,CAAEC,SAAU,WAFO,uBACrBC,EADqB,EACrBA,KADqB,kBAKtBA,GALsB,2CAAH,sDAQfM,EAAY,mCAAG,WAAMtB,GAAN,yFACHW,EAAAA,EAAAA,IAAA,gBACZX,EADY,4BACeY,IAFZ,uBAClBI,EADkB,EAClBA,KADkB,kBAKnBA,GALmB,2CAAH,sDAQZO,EAAc,mCAAG,WAAMvB,GAAN,yFACLW,EAAAA,EAAAA,IAAA,gBACZX,EADY,4BACeY,GACpC,CAAEE,OAAQ,CAAEC,SAAU,QAASK,KAAM,OAHX,uBACpBJ,EADoB,EACpBA,KADoB,kBAKrBA,GALqB,2CAAH,qD,gIC7CpB,IAAMQ,EAAW,mCACXC,EACX,oEACW5B,EAAa,mCACbC,EACX,mE","sources":["components/Cast/CastList.styled.jsx","components/Cast/CastList.jsx","components/Cast/Cast.jsx","servises/Api.jsx","utils/constans.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ListCast = styled.ul`\n  padding: ${props => props.theme.spacing(4)} 0;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 16px;\n  justify-content: center;\n`;\n\nexport const CastItem = styled.li`\n  flex-basis: calc((100% - 32px) / 3);\n`;\n\nexport const CastImg = styled.img``;\n\nexport const Wrapper = styled.div`\n  padding: 8px;\n  width: 300px;\n  border: 1px solid #dfcac6;\n`;\n\nexport const OriginalName = styled.p`\n  margin-bottom: ${props => props.theme.spacing(1)};\n  font-size: ${props => props.theme.fontSizes.small};\n  font-weight: 600;\n`;\n\nexport const Character = styled.span`\n  font-size: ${props => props.theme.fontSizes.small};\n  font-weight: 600;\n`;\n\nexport const CharacterText = styled.p`\n  display: inline;\n  font-size: ${props => props.theme.fontSizes.small};\n`;\n","import PropTypes from 'prop-types';\nimport { castImgURL, castPlacholder } from 'utils';\nimport {\n  ListCast,\n  CastItem,\n  CastImg,\n  Wrapper,\n  OriginalName,\n  Character,\n  CharacterText,\n} from './CastList.styled';\n\nexport const CastList = ({ cast }) => {\n  return (\n    <div>\n      <ListCast>\n        {cast.map(({ cast_id, original_name, profile_path, character }) => (\n          <CastItem key={cast_id}>\n            <CastImg\n              src={\n                profile_path ? `${castImgURL}${profile_path}` : castPlacholder\n              }\n              alt={original_name}\n            />\n            <Wrapper>\n              <OriginalName>{original_name}</OriginalName>\n              <Character>Character:</Character>\n              <CharacterText>{character}</CharacterText>\n            </Wrapper>\n          </CastItem>\n        ))}\n      </ListCast>\n    </div>\n  );\n};\n\nCastList.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      cast_id: PropTypes.number,\n      original_name: PropTypes.string,\n      profile_path: PropTypes.string,\n      character: PropTypes.string,\n    }).isRequired\n  ),\n};\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport * as ApiServise from '../../servises/Api';\nimport { CastList } from './CastList';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    ApiServise.getMovieCast(movieId)\n      .then(({ cast }) => {\n        setCast([...cast]);\n      })\n      .catch(err => console.log(err));\n  }, [movieId]);\n\n  return (\n    <>\n      <CastList cast={cast} />\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'd9390daba6ebc6ed6dca3d5ccaa12bef';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(`trending/movie/day?api_key=${API_KEY}`, {\n    params: { language: 'en-US' },\n  });\n\n  return data;\n};\n\nexport const getSearchMovies = async query => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}`,\n    {\n      params: {\n        query: `${query}`,\n        include_adult: 'false',\n        language: 'en-US',\n        page: '1',\n      },\n    }\n  );\n\n  return data;\n};\n\nexport const getMovieDetails = async movieId => {\n  const { data } = await axios.get(`movie/${movieId}?api_key=${API_KEY}`, {\n    params: { language: 'en-US' },\n  });\n\n  return data;\n};\n\nexport const getMovieCast = async movieId => {\n  const { data } = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n\n  return data;\n};\n\nexport const getReviewMovie = async movieId => {\n  const { data } = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}`,\n    { params: { language: 'en-US', page: '1' } }\n  );\n  return data;\n};\n","export const MovieURL = 'https://image.tmdb.org/t/p/w500/';\nexport const MoviePlacholder =\n  'https://placehold.co/400x600/jpg?text=Photo+will+appear+here+soon';\nexport const castImgURL = 'https://image.tmdb.org/t/p/w300/';\nexport const castPlacholder =\n  'https://placehold.co/300x450/jpg?text=Photo+will+appear+here+soon';\n"],"names":["ListCast","styled","props","theme","spacing","CastItem","CastImg","Wrapper","OriginalName","fontSizes","small","Character","CharacterText","CastList","cast","map","cast_id","original_name","profile_path","character","src","castImgURL","castPlacholder","alt","movieId","useParams","useState","setCast","useEffect","ApiServise","then","catch","err","console","log","axios","API_KEY","getTrendingMovies","params","language","data","getSearchMovies","query","include_adult","page","getMovieDetails","getMovieCast","getReviewMovie","MovieURL","MoviePlacholder"],"sourceRoot":""}